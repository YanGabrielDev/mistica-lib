import * as React from 'react';
import type { TouchableElement } from './touchable';
import type { ExclusifyUnion } from './utils/utility-types';
import type { DataAttributes, IconProps, TrackingEvent } from './utils/types';
interface HrefProps {
    href: string;
    newTab?: boolean;
}
interface ToProps {
    to: string;
    fullPageOnWebView?: boolean;
    replace?: boolean;
}
interface OnPressProps {
    onPress: (event: React.MouseEvent<HTMLElement>) => void | undefined | Promise<void>;
}
interface MaybeProps {
    onPress?: undefined;
    href?: undefined;
    to?: undefined;
}
interface BaseDeprecatedProps {
    /** @deprecated */
    children?: React.ReactNode;
    /** @deprecated */
    className?: string;
    disabled?: boolean;
    /** @deprecated */
    icon?: string;
    /** @deprecated */
    iconSize?: number;
    /** @deprecated */
    backgroundColor?: string;
    /** @deprecated */
    size?: number | string;
    /** @deprecated */
    style?: React.CSSProperties;
    /** @deprecated */
    'aria-live'?: 'polite' | 'off' | 'assertive';
    trackingEvent?: TrackingEvent | ReadonlyArray<TrackingEvent>;
    /** "data-" prefix is automatically added. For example, use "testid" instead of "data-testid" */
    dataAttributes?: DataAttributes;
    newTab?: boolean;
    'aria-label'?: string;
}
type DeprecatedProps = BaseDeprecatedProps & ExclusifyUnion<HrefProps | ToProps | OnPressProps | MaybeProps>;
/**
 * @deprecated these usages of IconButton will be removed
 *
 * IconButton with image url:
 *
 *     <IconButton icon="http://my.image.jpg" aria-label="label" />
 *
 * IconButton with SVG component as icon. Child ignored if `icon` prop is set. Only one child is accepted!
 *
 *     <IconButton aria-label="label">
 *         <MySvgIconComponent />
 *     </IconButton />
 *
 */
export declare const RawDeprecatedIconButton: React.ForwardRefExoticComponent<DeprecatedProps & React.RefAttributes<TouchableElement>>;
export type IconButtonType = 'neutral' | 'brand' | 'danger';
export type IconButtonBackgroundType = 'transparent' | 'solid' | 'soft';
type AriaProps = ExclusifyUnion<{
    'aria-label': string;
} | {
    'aria-labelledby': string;
}>;
interface BaseProps {
    children?: undefined;
    trackingEvent?: TrackingEvent | ReadonlyArray<TrackingEvent>;
    dataAttributes?: DataAttributes;
    disabled?: boolean;
    showSpinner?: boolean;
    small?: boolean;
    bleedLeft?: boolean;
    bleedRight?: boolean;
    bleedY?: boolean;
}
interface IconButtonBaseProps {
    Icon: React.FC<IconProps>;
    type?: IconButtonType;
    backgroundType?: IconButtonBackgroundType;
}
interface InternalIconButtonBaseProps {
    isOverMedia?: boolean;
    hasInteractiveAreaBleed?: boolean;
    hasOverlay?: boolean;
}
export type IconButtonProps = BaseProps & IconButtonBaseProps & ExclusifyUnion<HrefProps | ToProps | OnPressProps | MaybeProps> & AriaProps;
export declare const RawIconButton: React.ForwardRefExoticComponent<(IconButtonProps & InternalIconButtonBaseProps) & React.RefAttributes<TouchableElement>>;
export declare const InternalIconButton: React.ForwardRefExoticComponent<({
    children?: React.ReactNode;
    className?: string | undefined;
    disabled?: boolean | undefined;
    icon?: string | undefined;
    iconSize?: number | undefined;
    backgroundColor?: string | undefined;
    size?: string | number | undefined;
    style?: React.CSSProperties | undefined;
    'aria-live'?: "polite" | "off" | "assertive" | undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    newTab?: boolean | undefined;
    'aria-label'?: string | undefined;
    href: string;
    replace?: undefined;
    to?: undefined;
    onPress?: undefined;
    fullPageOnWebView?: undefined;
    small?: undefined;
    type?: undefined;
    "aria-labelledby"?: undefined;
    backgroundType?: undefined;
    isOverMedia?: undefined;
    hasOverlay?: undefined;
    Icon?: undefined;
    bleedLeft?: undefined;
    bleedRight?: undefined;
    bleedY?: undefined;
    hasInteractiveAreaBleed?: undefined;
    showSpinner?: undefined;
} | {
    children?: React.ReactNode;
    className?: string | undefined;
    disabled?: boolean | undefined;
    icon?: string | undefined;
    iconSize?: number | undefined;
    backgroundColor?: string | undefined;
    size?: string | number | undefined;
    style?: React.CSSProperties | undefined;
    'aria-live'?: "polite" | "off" | "assertive" | undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    newTab?: undefined;
    'aria-label'?: string | undefined;
    to: string;
    fullPageOnWebView?: boolean | undefined;
    replace?: boolean | undefined;
    href?: undefined;
    onPress?: undefined;
    small?: undefined;
    type?: undefined;
    "aria-labelledby"?: undefined;
    backgroundType?: undefined;
    isOverMedia?: undefined;
    hasOverlay?: undefined;
    Icon?: undefined;
    bleedLeft?: undefined;
    bleedRight?: undefined;
    bleedY?: undefined;
    hasInteractiveAreaBleed?: undefined;
    showSpinner?: undefined;
} | {
    children?: React.ReactNode;
    className?: string | undefined;
    disabled?: boolean | undefined;
    icon?: string | undefined;
    iconSize?: number | undefined;
    backgroundColor?: string | undefined;
    size?: string | number | undefined;
    style?: React.CSSProperties | undefined;
    'aria-live'?: "polite" | "off" | "assertive" | undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    newTab?: undefined;
    'aria-label'?: string | undefined;
    onPress: (event: React.MouseEvent<HTMLElement>) => void | undefined | Promise<void>;
    replace?: undefined;
    to?: undefined;
    href?: undefined;
    fullPageOnWebView?: undefined;
    small?: undefined;
    type?: undefined;
    "aria-labelledby"?: undefined;
    backgroundType?: undefined;
    isOverMedia?: undefined;
    hasOverlay?: undefined;
    Icon?: undefined;
    bleedLeft?: undefined;
    bleedRight?: undefined;
    bleedY?: undefined;
    hasInteractiveAreaBleed?: undefined;
    showSpinner?: undefined;
} | {
    children?: React.ReactNode;
    className?: string | undefined;
    disabled?: boolean | undefined;
    icon?: string | undefined;
    iconSize?: number | undefined;
    backgroundColor?: string | undefined;
    size?: string | number | undefined;
    style?: React.CSSProperties | undefined;
    'aria-live'?: "polite" | "off" | "assertive" | undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    newTab?: undefined;
    'aria-label'?: string | undefined;
    onPress?: undefined;
    href?: undefined;
    to?: undefined;
    replace?: undefined;
    fullPageOnWebView?: undefined;
    small?: undefined;
    type?: undefined;
    "aria-labelledby"?: undefined;
    backgroundType?: undefined;
    isOverMedia?: undefined;
    hasOverlay?: undefined;
    Icon?: undefined;
    bleedLeft?: undefined;
    bleedRight?: undefined;
    bleedY?: undefined;
    hasInteractiveAreaBleed?: undefined;
    showSpinner?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    href: string;
    newTab?: boolean | undefined;
    replace?: undefined;
    to?: undefined;
    onPress?: undefined;
    fullPageOnWebView?: undefined;
    'aria-label': string;
    "aria-labelledby"?: undefined;
    isOverMedia?: boolean | undefined;
    hasInteractiveAreaBleed?: boolean | undefined;
    hasOverlay?: boolean | undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    href: string;
    newTab?: boolean | undefined;
    replace?: undefined;
    to?: undefined;
    onPress?: undefined;
    fullPageOnWebView?: undefined;
    'aria-labelledby': string;
    "aria-label"?: undefined;
    isOverMedia?: boolean | undefined;
    hasInteractiveAreaBleed?: boolean | undefined;
    hasOverlay?: boolean | undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    to: string;
    fullPageOnWebView?: boolean | undefined;
    replace?: boolean | undefined;
    href?: undefined;
    newTab?: undefined;
    onPress?: undefined;
    'aria-label': string;
    "aria-labelledby"?: undefined;
    isOverMedia?: boolean | undefined;
    hasInteractiveAreaBleed?: boolean | undefined;
    hasOverlay?: boolean | undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    to: string;
    fullPageOnWebView?: boolean | undefined;
    replace?: boolean | undefined;
    href?: undefined;
    newTab?: undefined;
    onPress?: undefined;
    'aria-labelledby': string;
    "aria-label"?: undefined;
    isOverMedia?: boolean | undefined;
    hasInteractiveAreaBleed?: boolean | undefined;
    hasOverlay?: boolean | undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    onPress: (event: React.MouseEvent<HTMLElement>) => void | undefined | Promise<void>;
    replace?: undefined;
    to?: undefined;
    href?: undefined;
    newTab?: undefined;
    fullPageOnWebView?: undefined;
    'aria-label': string;
    "aria-labelledby"?: undefined;
    isOverMedia?: boolean | undefined;
    hasInteractiveAreaBleed?: boolean | undefined;
    hasOverlay?: boolean | undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    onPress: (event: React.MouseEvent<HTMLElement>) => void | undefined | Promise<void>;
    replace?: undefined;
    to?: undefined;
    href?: undefined;
    newTab?: undefined;
    fullPageOnWebView?: undefined;
    'aria-labelledby': string;
    "aria-label"?: undefined;
    isOverMedia?: boolean | undefined;
    hasInteractiveAreaBleed?: boolean | undefined;
    hasOverlay?: boolean | undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    onPress?: undefined;
    href?: undefined;
    to?: undefined;
    replace?: undefined;
    newTab?: undefined;
    fullPageOnWebView?: undefined;
    'aria-label': string;
    "aria-labelledby"?: undefined;
    isOverMedia?: boolean | undefined;
    hasInteractiveAreaBleed?: boolean | undefined;
    hasOverlay?: boolean | undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    onPress?: undefined;
    href?: undefined;
    to?: undefined;
    replace?: undefined;
    newTab?: undefined;
    fullPageOnWebView?: undefined;
    'aria-labelledby': string;
    "aria-label"?: undefined;
    isOverMedia?: boolean | undefined;
    hasInteractiveAreaBleed?: boolean | undefined;
    hasOverlay?: boolean | undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
}) & React.RefAttributes<TouchableElement>>;
export declare const IconButton: React.ForwardRefExoticComponent<({
    children?: React.ReactNode;
    className?: string | undefined;
    disabled?: boolean | undefined;
    icon?: string | undefined;
    iconSize?: number | undefined;
    backgroundColor?: string | undefined;
    size?: string | number | undefined;
    style?: React.CSSProperties | undefined;
    'aria-live'?: "polite" | "off" | "assertive" | undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    newTab?: boolean | undefined;
    'aria-label'?: string | undefined;
    href: string;
    replace?: undefined;
    to?: undefined;
    onPress?: undefined;
    fullPageOnWebView?: undefined;
    small?: undefined;
    type?: undefined;
    "aria-labelledby"?: undefined;
    backgroundType?: undefined;
    Icon?: undefined;
    bleedLeft?: undefined;
    bleedRight?: undefined;
    bleedY?: undefined;
    showSpinner?: undefined;
} | {
    children?: React.ReactNode;
    className?: string | undefined;
    disabled?: boolean | undefined;
    icon?: string | undefined;
    iconSize?: number | undefined;
    backgroundColor?: string | undefined;
    size?: string | number | undefined;
    style?: React.CSSProperties | undefined;
    'aria-live'?: "polite" | "off" | "assertive" | undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    newTab?: undefined;
    'aria-label'?: string | undefined;
    to: string;
    fullPageOnWebView?: boolean | undefined;
    replace?: boolean | undefined;
    href?: undefined;
    onPress?: undefined;
    small?: undefined;
    type?: undefined;
    "aria-labelledby"?: undefined;
    backgroundType?: undefined;
    Icon?: undefined;
    bleedLeft?: undefined;
    bleedRight?: undefined;
    bleedY?: undefined;
    showSpinner?: undefined;
} | {
    children?: React.ReactNode;
    className?: string | undefined;
    disabled?: boolean | undefined;
    icon?: string | undefined;
    iconSize?: number | undefined;
    backgroundColor?: string | undefined;
    size?: string | number | undefined;
    style?: React.CSSProperties | undefined;
    'aria-live'?: "polite" | "off" | "assertive" | undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    newTab?: undefined;
    'aria-label'?: string | undefined;
    onPress: (event: React.MouseEvent<HTMLElement>) => void | undefined | Promise<void>;
    replace?: undefined;
    to?: undefined;
    href?: undefined;
    fullPageOnWebView?: undefined;
    small?: undefined;
    type?: undefined;
    "aria-labelledby"?: undefined;
    backgroundType?: undefined;
    Icon?: undefined;
    bleedLeft?: undefined;
    bleedRight?: undefined;
    bleedY?: undefined;
    showSpinner?: undefined;
} | {
    children?: React.ReactNode;
    className?: string | undefined;
    disabled?: boolean | undefined;
    icon?: string | undefined;
    iconSize?: number | undefined;
    backgroundColor?: string | undefined;
    size?: string | number | undefined;
    style?: React.CSSProperties | undefined;
    'aria-live'?: "polite" | "off" | "assertive" | undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    newTab?: undefined;
    'aria-label'?: string | undefined;
    onPress?: undefined;
    href?: undefined;
    to?: undefined;
    replace?: undefined;
    fullPageOnWebView?: undefined;
    small?: undefined;
    type?: undefined;
    "aria-labelledby"?: undefined;
    backgroundType?: undefined;
    Icon?: undefined;
    bleedLeft?: undefined;
    bleedRight?: undefined;
    bleedY?: undefined;
    showSpinner?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    href: string;
    newTab?: boolean | undefined;
    replace?: undefined;
    to?: undefined;
    onPress?: undefined;
    fullPageOnWebView?: undefined;
    'aria-label': string;
    "aria-labelledby"?: undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    href: string;
    newTab?: boolean | undefined;
    replace?: undefined;
    to?: undefined;
    onPress?: undefined;
    fullPageOnWebView?: undefined;
    'aria-labelledby': string;
    "aria-label"?: undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    to: string;
    fullPageOnWebView?: boolean | undefined;
    replace?: boolean | undefined;
    href?: undefined;
    newTab?: undefined;
    onPress?: undefined;
    'aria-label': string;
    "aria-labelledby"?: undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    to: string;
    fullPageOnWebView?: boolean | undefined;
    replace?: boolean | undefined;
    href?: undefined;
    newTab?: undefined;
    onPress?: undefined;
    'aria-labelledby': string;
    "aria-label"?: undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    onPress: (event: React.MouseEvent<HTMLElement>) => void | undefined | Promise<void>;
    replace?: undefined;
    to?: undefined;
    href?: undefined;
    newTab?: undefined;
    fullPageOnWebView?: undefined;
    'aria-label': string;
    "aria-labelledby"?: undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    onPress: (event: React.MouseEvent<HTMLElement>) => void | undefined | Promise<void>;
    replace?: undefined;
    to?: undefined;
    href?: undefined;
    newTab?: undefined;
    fullPageOnWebView?: undefined;
    'aria-labelledby': string;
    "aria-label"?: undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    onPress?: undefined;
    href?: undefined;
    to?: undefined;
    replace?: undefined;
    newTab?: undefined;
    fullPageOnWebView?: undefined;
    'aria-label': string;
    "aria-labelledby"?: undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
} | {
    children?: undefined;
    trackingEvent?: TrackingEvent | readonly TrackingEvent[] | undefined;
    dataAttributes?: DataAttributes | undefined;
    disabled?: boolean | undefined;
    showSpinner?: boolean | undefined;
    small?: boolean | undefined;
    bleedLeft?: boolean | undefined;
    bleedRight?: boolean | undefined;
    bleedY?: boolean | undefined;
    Icon: React.FC<IconProps>;
    type?: IconButtonType | undefined;
    backgroundType?: IconButtonBackgroundType | undefined;
    onPress?: undefined;
    href?: undefined;
    to?: undefined;
    replace?: undefined;
    newTab?: undefined;
    fullPageOnWebView?: undefined;
    'aria-labelledby': string;
    "aria-label"?: undefined;
    size?: undefined;
    backgroundColor?: undefined;
    style?: undefined;
    icon?: undefined;
    className?: undefined;
    "aria-live"?: undefined;
    iconSize?: undefined;
}) & React.RefAttributes<TouchableElement>>;
export declare const BaseIconButton: (props: ExclusifyUnion<DeprecatedProps | IconButtonProps>) => JSX.Element;
type ToggleStateProps = {
    Icon: React.FC<IconProps>;
    type?: IconButtonType;
    backgroundType?: IconButtonBackgroundType;
} & AriaProps;
interface BaseToggleProps {
    checkedProps: ToggleStateProps;
    uncheckedProps: ToggleStateProps;
    onChange?: (checked: boolean) => void | undefined | Promise<void>;
    checked?: boolean;
    defaultChecked?: boolean;
}
export type ToggleIconButtonProps = BaseProps & BaseToggleProps;
export declare const InternalToggleIconButton: React.ForwardRefExoticComponent<BaseProps & BaseToggleProps & InternalIconButtonBaseProps & React.RefAttributes<TouchableElement>>;
export declare const ToggleIconButton: React.ForwardRefExoticComponent<BaseProps & BaseToggleProps & React.RefAttributes<TouchableElement>>;
export {};
